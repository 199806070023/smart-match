def LCSstring(s1, s2):
    res= [[0 for i in range(len(s2) + 1)] for j in range(len(s1) + 1)]  # 生成0矩阵，为方便后续计算，比字符串长度多了一列
    rmax = 0  # 最长匹配的长度
    p = 0  # 最长匹配对应在s1中的最后一位
    for i in range(len(s1)):
        for j in range(len(s2)):
            if s1[i] == s2[j]: # 如果相等，则加入现有的公共子串
                res[i + 1][j + 1] = res[i][j] + 1
                if res[i + 1][j + 1] > rmax:
                    rmax = res[i + 1][j + 1]
                    p = i + 1
    return s1[p - rmax:p], rmax,i  # 返回最长子串，最长子串的长度，最长子串开始的位置
print('hello与low的最长子串，最长子串的长度，最长子串开始的位置：')
print(LCSstring('hello', 'low'))
